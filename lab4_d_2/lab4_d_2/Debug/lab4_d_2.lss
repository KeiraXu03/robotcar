
lab4_d_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000723  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  000009a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028a  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037d  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_18>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <usart_init>:
unsigned int i = 0;
unsigned char ch1;
unsigned char ch2;
void usart_init()
{
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<UDRIE0) | (1<<RXCIE0);
  90:	88 eb       	ldi	r24, 0xB8	; 184
  92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00) | (1<<UMSEL01);
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0H = 0x00;
  9c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67; //103, 9600dp
  a0:	87 e6       	ldi	r24, 0x67	; 103
  a2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  a6:	08 95       	ret

000000a8 <__vector_19>:
}


ISR (USART_UDRE_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	if (state == 0)
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  ba:	81 11       	cpse	r24, r1
  bc:	03 c0       	rjmp	.+6      	; 0xc4 <__vector_19+0x1c>
	{
		UDR0 = 'a';   //Always input a
  be:	81 e6       	ldi	r24, 0x61	; 97
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	if (state == 1)
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	d9 f4       	brne	.+54     	; 0x102 <__vector_19+0x5a>
	{
		if (i < 10)
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d4:	0a 97       	sbiw	r24, 0x0a	; 10
  d6:	70 f4       	brcc	.+28     	; 0xf4 <__vector_19+0x4c>
		{
			UDR0 = input_char;
  d8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <input_char>
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			i++;
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	07 c0       	rjmp	.+14     	; 0x102 <__vector_19+0x5a>
		}
		else
		{
			state = 2;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			i = 0;     //stop input
  fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_18>:

ISR (USART_RX_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	input_char = UDR0;
 11e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <input_char>
	if (state == 0)
 126:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state>
 12a:	91 11       	cpse	r25, r1
 12c:	06 c0       	rjmp	.+12     	; 0x13a <__vector_18+0x2a>
	{
		ch1 = input_char;
 12e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ch1>
		state = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 138:	0a c0       	rjmp	.+20     	; 0x14e <__vector_18+0x3e>
	}
	if (state == 2)
 13a:	92 30       	cpi	r25, 0x02	; 2
 13c:	41 f4       	brne	.+16     	; 0x14e <__vector_18+0x3e>
	{
		ch2 = input_char;
 13e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ch2>
		if (ch2 == ch1)
 142:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ch1>
 146:	89 13       	cpse	r24, r25
 148:	02 c0       	rjmp	.+4      	; 0x14e <__vector_18+0x3e>
		{
			state = 0;
 14a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		}
	}
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <main>:

int main(void)
{
	usart_init();
 15c:	0e 94 48 00 	call	0x90	; 0x90 <usart_init>
	sei();
 160:	78 94       	sei
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x6>

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
