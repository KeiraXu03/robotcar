
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087a  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b0  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fa  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Section_C>:
		Delay_1_Sec_CTC();
	}
}
void Section_C(void){
	//DDRD=0x00;
	DDRC|=(1<<0);//output
  80:	38 9a       	sbi	0x07, 0	; 7
	PORTC=(0<<0);//low
  82:	18 b8       	out	0x08, r1	; 8
	while(1){
		OCR1A=0x02;//3 times
  84:	c8 e8       	ldi	r28, 0x88	; 136
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	42 e0       	ldi	r20, 0x02	; 2
  8a:	50 e0       	ldi	r21, 0x00	; 0
		TCCR1A=0x00;
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b0 e0       	ldi	r27, 0x00	; 0
		TCCR1B=0x0F;//rising edge CTC mode
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	3f e0       	ldi	r19, 0x0F	; 15
		while((TIFR1 & (1<<OCF1A))==0){
		}
		TCCR1B = 0;//stop
		TIFR1=0x01<<OCF1A;//clear
  96:	22 e0       	ldi	r18, 0x02	; 2
		PORTC^=(1<<0);//toggle
  98:	91 e0       	ldi	r25, 0x01	; 1
void Section_C(void){
	//DDRD=0x00;
	DDRC|=(1<<0);//output
	PORTC=(0<<0);//low
	while(1){
		OCR1A=0x02;//3 times
  9a:	59 83       	std	Y+1, r21	; 0x01
  9c:	48 83       	st	Y, r20
		TCCR1A=0x00;
  9e:	1c 92       	st	X, r1
		TCCR1B=0x0F;//rising edge CTC mode
  a0:	30 83       	st	Z, r19
		while((TIFR1 & (1<<OCF1A))==0){
  a2:	b1 9b       	sbis	0x16, 1	; 22
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <Section_C+0x22>
		}
		TCCR1B = 0;//stop
  a6:	10 82       	st	Z, r1
		TIFR1=0x01<<OCF1A;//clear
  a8:	26 bb       	out	0x16, r18	; 22
		PORTC^=(1<<0);//toggle
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	89 27       	eor	r24, r25
  ae:	88 b9       	out	0x08, r24	; 8
	}
  b0:	f4 cf       	rjmp	.-24     	; 0x9a <Section_C+0x1a>

000000b2 <main>:
{
	//Section_A_normal();
	//Section_A_CTC();
	//Section_B_normal();
	//Section_B_CTC();
	Section_C();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <Section_C>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
