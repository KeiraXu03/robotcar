
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000021a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000842  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003de  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000216  00000000  00000000  00001aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_18>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_19>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  9e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <usart_init>:
	//unsigned char ch;
	//ch=0;
	
	i=0;
	if(trans_flag==1){
		UDR0 = beginning_str[i];
  a6:	88 e1       	ldi	r24, 0x18	; 24
  a8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  bc:	08 95       	ret

000000be <__vector_18>:
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <receive_flag+0x1>
  d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <receive_flag>
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_20>:
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <trans_flag+0x1>
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <trans_flag>
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_19>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <section_C>:
	}


}
void section_C(){
	int flag=0;
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char ch;
	unsigned char ch2;
	while(1){
		if(flag==0){
			do{
				while(!(UCSR0A & (1<<UDRE0)));
 13a:	e0 ec       	ldi	r30, 0xC0	; 192
 13c:	f0 e0       	ldi	r31, 0x00	; 0
				UDR0 = 'a';
 13e:	a6 ec       	ldi	r26, 0xC6	; 198
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	91 e6       	ldi	r25, 0x61	; 97
			}while(!(UCSR0A & (1<<RXC0)));
			ch = UDR0;	
			flag=1;
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	c0 e0       	ldi	r28, 0x00	; 0
	int flag=0;
	//int times=0;
	unsigned char ch;
	unsigned char ch2;
	while(1){
		if(flag==0){
 14c:	21 15       	cp	r18, r1
 14e:	31 05       	cpc	r19, r1
 150:	99 f4       	brne	.+38     	; 0x178 <section_C+0x42>
			do{
				while(!(UCSR0A & (1<<UDRE0)));
 152:	80 81       	ld	r24, Z
 154:	85 ff       	sbrs	r24, 5
 156:	fd cf       	rjmp	.-6      	; 0x152 <section_C+0x1c>
				UDR0 = 'a';
 158:	9c 93       	st	X, r25
			}while(!(UCSR0A & (1<<RXC0)));
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	cc f7       	brge	.-14     	; 0x152 <section_C+0x1c>
			ch = UDR0;	
 160:	4c 91       	ld	r20, X
 162:	2a e0       	ldi	r18, 0x0A	; 10
 164:	30 e0       	ldi	r19, 0x00	; 0
			flag=1;
			for(int i=0;i<10;i++){
				while (!(UCSR0A & (1<<UDRE0)));
 166:	80 81       	ld	r24, Z
 168:	85 ff       	sbrs	r24, 5
 16a:	fd cf       	rjmp	.-6      	; 0x166 <section_C+0x30>
				UDR0 = ch;
 16c:	4c 93       	st	X, r20
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
				while(!(UCSR0A & (1<<UDRE0)));
				UDR0 = 'a';
			}while(!(UCSR0A & (1<<RXC0)));
			ch = UDR0;	
			flag=1;
			for(int i=0;i<10;i++){
 172:	c9 f7       	brne	.-14     	; 0x166 <section_C+0x30>
			do{
				while(!(UCSR0A & (1<<UDRE0)));
				UDR0 = 'a';
			}while(!(UCSR0A & (1<<RXC0)));
			ch = UDR0;	
			flag=1;
 174:	26 2f       	mov	r18, r22
 176:	35 2f       	mov	r19, r21
			for(int i=0;i<10;i++){
				while (!(UCSR0A & (1<<UDRE0)));
				UDR0 = ch;
			}	
		}		
		if(flag==1){
 178:	21 30       	cpi	r18, 0x01	; 1
 17a:	31 05       	cpc	r19, r1
 17c:	39 f7       	brne	.-50     	; 0x14c <section_C+0x16>
			while (!(UCSR0A & (1<<RXC0)));
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	ec f7       	brge	.-6      	; 0x17e <section_C+0x48>
			ch2 = UDR0;
 184:	2c 91       	ld	r18, X
 186:	76 2f       	mov	r23, r22
 188:	85 2f       	mov	r24, r21
 18a:	42 13       	cpse	r20, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <section_C+0x5c>
 18e:	7d 2f       	mov	r23, r29
 190:	8c 2f       	mov	r24, r28
 192:	27 2f       	mov	r18, r23
 194:	38 2f       	mov	r19, r24
 196:	da cf       	rjmp	.-76     	; 0x14c <section_C+0x16>

00000198 <main>:
	//UBRR0L = 0xCF
}

int main(void)
{
	sei();
 198:	78 94       	sei
	usart_init();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <usart_init>
	//section_B();
	section_C();
 19e:	0e 94 9b 00 	call	0x136	; 0x136 <section_C>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
