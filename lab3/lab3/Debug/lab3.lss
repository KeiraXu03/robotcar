
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000320  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091d  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d1  00000000  00000000  00000d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063b  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_1>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  88:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
	PORTC=(1<<0);//low
	//Section_A_CTC();
	Section_B_CTC();
	//Section_C_CTC();
}
ISR (TIMER0_COMPA_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	PORTC^=(1<<0);//toggle
  9e:	98 b1       	in	r25, 0x08	; 8
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	88 b9       	out	0x08, r24	; 8
	OCR0A=0x02;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	87 bd       	out	0x27, r24	; 39
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <__vector_1>:
ISR (INT0_vect){
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
	Times++;
  c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Times>
  ca:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Times+0x1>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Times+0x1>
  d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Times>
	if(Times==3){
  d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Times>
  dc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Times+0x1>
  e0:	03 97       	sbiw	r24, 0x03	; 3
  e2:	41 f4       	brne	.+16     	; 0xf4 <__vector_1+0x3c>
		PORTC^=(1<<0);
  e4:	98 b1       	in	r25, 0x08	; 8
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 27       	eor	r24, r25
  ea:	88 b9       	out	0x08, r24	; 8
		Times=0;
  ec:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <Times+0x1>
  f0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Times>
	}
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_2>:
ISR (INT1_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	Times++;
 110:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Times>
 114:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Times+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <Times+0x1>
 11e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Times>
	if(Times%2==1){
 122:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Times>
 126:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Times+0x1>
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	90 78       	andi	r25, 0x80	; 128
 12e:	99 23       	and	r25, r25
 130:	24 f4       	brge	.+8      	; 0x13a <__vector_2+0x38>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	8e 6f       	ori	r24, 0xFE	; 254
 136:	9f 6f       	ori	r25, 0xFF	; 255
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	19 f4       	brne	.+6      	; 0x144 <__vector_2+0x42>
		PORTB = 0x00;
 13e:	15 b8       	out	0x05, r1	; 5
		PORTC = 0x00;
 140:	18 b8       	out	0x08, r1	; 8
 142:	03 c0       	rjmp	.+6      	; 0x14a <__vector_2+0x48>
	}
	else{
		PORTB = 0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	85 b9       	out	0x05, r24	; 5
		PORTC = 0xFF;
 148:	88 b9       	out	0x08, r24	; 8
	}
}
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <Delay_1_Sec_CTC>:
	sei ();
	traffic();

}
void Delay_1_Sec_CTC(void){//delay 1 sec use CTC mode
	OCR1A = 15624;//16M*1/1024-1
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	9d e3       	ldi	r25, 0x3D	; 61
 15c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 160:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00;//CTC MODE
 164:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x0D;
 168:	8d e0       	ldi	r24, 0x0D	; 13
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while(delay_flag==0){
 16e:	06 c0       	rjmp	.+12     	; 0x17c <Delay_1_Sec_CTC+0x24>
		if(stop_flag%2==0)return;
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	80 ff       	sbrs	r24, 0
 17a:	0a c0       	rjmp	.+20     	; 0x190 <Delay_1_Sec_CTC+0x38>
}
void Delay_1_Sec_CTC(void){//delay 1 sec use CTC mode
	OCR1A = 15624;//16M*1/1024-1
	TCCR1A = 0x00;//CTC MODE
	TCCR1B = 0x0D;
	while(delay_flag==0){
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delay_flag>
 180:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delay_flag+0x1>
 184:	89 2b       	or	r24, r25
 186:	a1 f3       	breq	.-24     	; 0x170 <Delay_1_Sec_CTC+0x18>
		if(stop_flag%2==0)return;
	};
	delay_flag=0;
 188:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <delay_flag+0x1>
 18c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <delay_flag>
 190:	08 95       	ret

00000192 <__vector_11>:
}
ISR(TIMER1_COMPA_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
	delay_flag=1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delay_flag+0x1>
 1a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delay_flag>
}
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <Delay_5_Sec_CTC>:
void Delay_5_Sec_CTC(void){//delay 5 sec use CTC mode
		for(int i=0;i<5;i++){
			Delay_1_Sec_CTC();
 1ba:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
 1be:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
 1c2:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
 1c6:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
 1ca:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
 1ce:	08 95       	ret

000001d0 <Blink>:
		}
	}
void Blink(void){//delay 0.2 sec use normal mode
	TCNT1H = 0xF3;//TCNT1=62411,65536-16M*1/1024/5
 1d0:	83 ef       	ldi	r24, 0xF3	; 243
 1d2:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0xC8;
 1d6:	88 ec       	ldi	r24, 0xC8	; 200
 1d8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0x00;//normal mode
 1dc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0x05;//pre-scaler 1024
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	while((TIFR1&(1<<TOV1))==0);
 1e6:	b0 9b       	sbis	0x16, 0	; 22
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <Blink+0x16>
	TCCR1B = 0;//stop
 1ea:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = 0x01<<TOV1;//clear
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	86 bb       	out	0x16, r24	; 22
 1f2:	08 95       	ret

000001f4 <traffic>:
}
void traffic(void){
	sei ();
 1f4:	78 94       	sei
	while(1){
		PORTB=0x11;//STATE1
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f1 e1       	ldi	r31, 0x11	; 17
 1fa:	cf 2e       	mov	r12, r31
 1fc:	f0 2d       	mov	r31, r0
		PORTC|=(1<<4);
		Delay_5_Sec_CTC();
		PORTC&=~(1<<4);
		PORTB=0x21;
 1fe:	0f 2e       	mov	r0, r31
 200:	f1 e2       	ldi	r31, 0x21	; 33
 202:	df 2e       	mov	r13, r31
 204:	f0 2d       	mov	r31, r0
		PORTC|=(1<<4);//STATE2
		Delay_1_Sec_CTC();
		PORTC&=~(1<<4);
		PORTB=0x09;
 206:	d9 e0       	ldi	r29, 0x09	; 9
		PORTC|=(1<<4);//STATE3
		Delay_1_Sec_CTC();
		PORTC&=~(1<<4);
		PORTB=0x0D;
 208:	0f 2e       	mov	r0, r31
 20a:	fd e0       	ldi	r31, 0x0D	; 13
 20c:	ef 2e       	mov	r14, r31
 20e:	f0 2d       	mov	r31, r0
		PORTC|=(1<<4);//STATE4
		Delay_1_Sec_CTC();
		PORTC&=~(1<<4);
		PORTB=0x0A;
 210:	0f 2e       	mov	r0, r31
 212:	fa e0       	ldi	r31, 0x0A	; 10
 214:	ff 2e       	mov	r15, r31
 216:	f0 2d       	mov	r31, r0
		PORTC|=(1<<5);//STATE5
		Delay_5_Sec_CTC();
		PORTB=0x0C;
 218:	0c e0       	ldi	r16, 0x0C	; 12
		PORTC|=(1<<5);//STATE6
		Blink();
		PORTC^=(1<<5);
 21a:	c0 e2       	ldi	r28, 0x20	; 32
		PORTB=0x09;
		PORTC&=~(1<<5);
		PORTC|=(1<<4);//STATE7
		Delay_1_Sec_CTC();
		PORTC&=~(1<<4);
		PORTB=0x29;
 21c:	19 e2       	ldi	r17, 0x29	; 41
	TIFR1 = 0x01<<TOV1;//clear
}
void traffic(void){
	sei ();
	while(1){
		PORTB=0x11;//STATE1
 21e:	c5 b8       	out	0x05, r12	; 5
		PORTC|=(1<<4);
 220:	44 9a       	sbi	0x08, 4	; 8
		Delay_5_Sec_CTC();
 222:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Delay_5_Sec_CTC>
		PORTC&=~(1<<4);
 226:	44 98       	cbi	0x08, 4	; 8
		PORTB=0x21;
 228:	d5 b8       	out	0x05, r13	; 5
		PORTC|=(1<<4);//STATE2
 22a:	44 9a       	sbi	0x08, 4	; 8
		Delay_1_Sec_CTC();
 22c:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
		PORTC&=~(1<<4);
 230:	44 98       	cbi	0x08, 4	; 8
		PORTB=0x09;
 232:	d5 b9       	out	0x05, r29	; 5
		PORTC|=(1<<4);//STATE3
 234:	44 9a       	sbi	0x08, 4	; 8
		Delay_1_Sec_CTC();
 236:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
		PORTC&=~(1<<4);
 23a:	44 98       	cbi	0x08, 4	; 8
		PORTB=0x0D;
 23c:	e5 b8       	out	0x05, r14	; 5
		PORTC|=(1<<4);//STATE4
 23e:	44 9a       	sbi	0x08, 4	; 8
		Delay_1_Sec_CTC();
 240:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
		PORTC&=~(1<<4);
 244:	44 98       	cbi	0x08, 4	; 8
		PORTB=0x0A;
 246:	f5 b8       	out	0x05, r15	; 5
		PORTC|=(1<<5);//STATE5
 248:	45 9a       	sbi	0x08, 5	; 8
		Delay_5_Sec_CTC();
 24a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Delay_5_Sec_CTC>
		PORTB=0x0C;
 24e:	05 b9       	out	0x05, r16	; 5
		PORTC|=(1<<5);//STATE6
 250:	45 9a       	sbi	0x08, 5	; 8
		Blink();
 252:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Blink>
		PORTC^=(1<<5);
 256:	88 b1       	in	r24, 0x08	; 8
 258:	8c 27       	eor	r24, r28
 25a:	88 b9       	out	0x08, r24	; 8
		Blink();
 25c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Blink>
		PORTC^=(1<<5);
 260:	88 b1       	in	r24, 0x08	; 8
 262:	8c 27       	eor	r24, r28
 264:	88 b9       	out	0x08, r24	; 8
		Blink();//0.2sec
 266:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Blink>
		PORTC^=(1<<5);
 26a:	88 b1       	in	r24, 0x08	; 8
 26c:	8c 27       	eor	r24, r28
 26e:	88 b9       	out	0x08, r24	; 8
		Blink();//0.2sec
 270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <Blink>
		PORTB=0x09;
 274:	d5 b9       	out	0x05, r29	; 5
		PORTC&=~(1<<5);
 276:	45 98       	cbi	0x08, 5	; 8
		PORTC|=(1<<4);//STATE7
 278:	44 9a       	sbi	0x08, 4	; 8
		Delay_1_Sec_CTC();
 27a:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
		PORTC&=~(1<<4);
 27e:	44 98       	cbi	0x08, 4	; 8
		PORTB=0x29;
 280:	15 b9       	out	0x05, r17	; 5
		PORTC|=(1<<4);//STATE8
 282:	44 9a       	sbi	0x08, 4	; 8
		Delay_1_Sec_CTC();
 284:	0e 94 ac 00 	call	0x158	; 0x158 <Delay_1_Sec_CTC>
 288:	ca cf       	rjmp	.-108    	; 0x21e <traffic+0x2a>

0000028a <Section_B_CTC>:
		PORTB = 0xFF;
		PORTC = 0xFF;
	}
}
void Section_B_CTC(){
	EICRA=0x03;
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1<<INT0);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	8d bb       	out	0x1d, r24	; 29
	sei ();
 294:	78 94       	sei
	traffic();
 296:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <traffic>

0000029a <main>:
volatile int Times=0;
volatile int delay_flag=0;
volatile int stop_flag=0;
int main(void)
{
	DDRB=0xFF;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	84 b9       	out	0x04, r24	; 4
	DDRC=0xFF;
 29e:	87 b9       	out	0x07, r24	; 7
	PORTC=(1<<0);//low
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	88 b9       	out	0x08, r24	; 8
	//Section_A_CTC();
	Section_B_CTC();
 2a4:	0e 94 45 01 	call	0x28a	; 0x28a <Section_B_CTC>

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
